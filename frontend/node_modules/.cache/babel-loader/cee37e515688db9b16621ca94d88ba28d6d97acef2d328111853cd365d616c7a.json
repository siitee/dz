{"ast":null,"code":"// import React from 'react';\n\n// function Login() {\n\n//     function Log(){\n//         const login = document.getElementById('login').value\n//         const password = document.getElementById('password').value\n//         const data = {\n//             login: login,\n//             password: password\n//         }\n//         debugger\n//         console.log(data);\n\n//         const api = 'http://localhost:9001/login'\n\n//         fetch(api, {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json'\n//           },\n//           body: JSON.stringify(data)\n//         })\n//         .then(results => results.json())\n//         .then((results) => {\n//           console.log(results);\n//           localStorage.setItem('token', results.token)\n//         })\n//     }\n\n//   return (\n//     <>\n//       <h1>Логин</h1>\n//       <input id='login' type='text' placeholder='Логин'></input>\n//       <input id='password' type='password' placeholder='Пароль'></input>\n//       <button onClick={Log}>Войти</button>\n//     </>\n//   );\n// }\n\n// export default Login;\n\nconst PORT = 9001;\nconst URLDB = 'mongodb://127.0.0.1:27017/';\nimport express from 'express';\nimport cors from 'cors';\nimport jsonwebtoken from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport { secret } from './config.js';\nimport User from './models/User.js';\nimport Product from './models/Product.js';\nconst app = express();\nconst generateAccessToken = (id, login, email) => {\n  const payload = {\n    id,\n    login,\n    email\n  };\n  return jsonwebtoken.sign(payload, secret, {\n    expiresIn: '24h'\n  });\n};\napp.use(cors());\napp.use(express.json());\napp.post('/registration', async (req, res) => {\n  console.log(req.body);\n  const {\n    login,\n    password,\n    email\n  } = req.body;\n  const user = new User({\n    login,\n    password,\n    email\n  });\n  try {\n    await user.save();\n  } catch (err) {\n    if (err && err.code !== 11000) {\n      res.json({\n        message: 'Неизвестная ошибка.'\n      }).status(500);\n      return;\n    }\n\n    //duplicate key\n    if (err && err.code === 11000) {\n      res.json({\n        message: 'Не используйте повторно эти данные!'\n      }).status(400);\n      console.error('Не используйте повторно эти данные!');\n      return;\n    }\n  }\n  res.json({\n    message: 'Вы успешно зарегистрировались!'\n  });\n});\napp.post('/login', async (req, res) => {\n  console.log(req.body);\n  const {\n    login,\n    password\n  } = req.body;\n  let user;\n  try {\n    user = await User.findOne({\n      login\n    });\n  } catch (err) {\n    res.json({\n      message: 'Неизвестная ошибка.'\n    }).status(500);\n    return;\n  }\n  if (!user) {\n    return res.status(400).json({\n      message: 'Пользователь отсутствует в базе.'\n    });\n  }\n  if (user.password !== password) {\n    return res.status(400).json({\n      message: 'Неверный логин или пароль!'\n    });\n  }\n  const jwtToken = generateAccessToken(user._id, user.login, user.email);\n  res.json({\n    message: 'Вы успешно вошли на сайт!',\n    token: jwtToken\n  });\n});\napp.get('/products', async (req, res) => {\n  let products;\n  try {\n    products = await Product.find();\n  } catch (err) {\n    res.json({\n      message: 'Неизвестная ошибка.'\n    }).status(500);\n    return;\n  }\n  res.json({\n    data: products\n  });\n});\nconst start = async () => {\n  try {\n    await mongoose.connect(URLDB);\n    app.listen(PORT, () => console.log(`Сервер работает на порту ${PORT}`));\n  } catch (e) {\n    console.error(e);\n  }\n};\nstart();","map":{"version":3,"names":["PORT","URLDB","express","cors","jsonwebtoken","mongoose","secret","User","Product","app","generateAccessToken","id","login","email","payload","sign","expiresIn","use","json","post","req","res","console","log","body","password","user","save","err","code","message","status","error","findOne","jwtToken","_id","token","get","products","find","data","start","connect","listen","e"],"sources":["C:/Users/murof/OneDrive/Рабочий стол/react/frontend/src/components/Login.jsx"],"sourcesContent":["// import React from 'react';\r\n\r\n// function Login() {\r\n\r\n//     function Log(){\r\n//         const login = document.getElementById('login').value\r\n//         const password = document.getElementById('password').value\r\n//         const data = {\r\n//             login: login,\r\n//             password: password\r\n//         }\r\n//         debugger\r\n//         console.log(data);\r\n\r\n//         const api = 'http://localhost:9001/login'\r\n\r\n//         fetch(api, {\r\n//           method: 'POST',\r\n//           headers: {\r\n//             'Content-Type': 'application/json'\r\n//           },\r\n//           body: JSON.stringify(data)\r\n//         })\r\n//         .then(results => results.json())\r\n//         .then((results) => {\r\n//           console.log(results);\r\n//           localStorage.setItem('token', results.token)\r\n//         })\r\n//     }\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>Логин</h1>\r\n//       <input id='login' type='text' placeholder='Логин'></input>\r\n//       <input id='password' type='password' placeholder='Пароль'></input>\r\n//       <button onClick={Log}>Войти</button>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Login;\r\n\r\n\r\n\r\n\r\n\r\nconst PORT = 9001\r\nconst URLDB = 'mongodb://127.0.0.1:27017/'\r\n\r\nimport express from 'express'\r\nimport cors from 'cors'\r\nimport jsonwebtoken from 'jsonwebtoken';\r\nimport mongoose from 'mongoose'\r\nimport { secret } from './config.js'\r\nimport User from './models/User.js'\r\nimport Product from './models/Product.js'\r\n\r\nconst app = express()\r\n\r\nconst generateAccessToken = (id, login, email) => {\r\n    const payload = {\r\n        id, login, email\r\n    }\r\n\r\n    return jsonwebtoken.sign(payload, secret, { expiresIn: '24h' })\r\n}\r\n\r\napp.use(cors())\r\napp.use(express.json())\r\n\r\napp.post('/registration', async (req, res) => {\r\n    console.log(req.body)\r\n    const { login, password, email } = req.body\r\n    const user = new User({ login, password, email })\r\n\r\n    try {\r\n        await user.save()\r\n    } catch (err) {\r\n        if (err && err.code !== 11000) {\r\n            res.json({\r\n                message: 'Неизвестная ошибка.'\r\n            })\r\n                .status(500)\r\n\r\n            return\r\n        }\r\n\r\n        //duplicate key\r\n        if (err && err.code === 11000) {\r\n            res.json({\r\n                message: 'Не используйте повторно эти данные!'\r\n            })\r\n                .status(400)\r\n            console.error('Не используйте повторно эти данные!')\r\n\r\n            return\r\n        }\r\n    }\r\n\r\n    res.json({\r\n        message: 'Вы успешно зарегистрировались!'\r\n    })\r\n})\r\n\r\napp.post('/login', async (req, res) => {\r\n    console.log(req.body)\r\n    const { login, password } = req.body\r\n    let user\r\n\r\n    try {\r\n        user = await User.findOne({ login })\r\n    } catch (err) {\r\n        res.json({\r\n            message: 'Неизвестная ошибка.'\r\n        })\r\n            .status(500)\r\n\r\n        return\r\n    }\r\n\r\n    if (!user) {\r\n        return res.status(400).json({ message: 'Пользователь отсутствует в базе.' })\r\n    }\r\n    if (user.password !== password) {\r\n        return res.status(400).json({ message: 'Неверный логин или пароль!' })\r\n    }\r\n    const jwtToken = generateAccessToken(user._id, user.login, user.email)\r\n\r\n    res.json({\r\n        message: 'Вы успешно вошли на сайт!',\r\n        token: jwtToken\r\n    })\r\n})\r\n\r\napp.get('/products', async (req, res) => {\r\n    let products\r\n\r\n    try {\r\n        products = await Product.find()\r\n    } catch (err) {\r\n        res.json({\r\n            message: 'Неизвестная ошибка.'\r\n        })\r\n            .status(500)\r\n\r\n        return\r\n    }\r\n\r\n    res.json({\r\n        data: products\r\n    })\r\n})\r\n\r\nconst start = async () => {\r\n    try {\r\n        await mongoose.connect(URLDB)\r\n        app.listen(PORT, () => console.log(`Сервер работает на порту ${PORT}`))\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nstart()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}